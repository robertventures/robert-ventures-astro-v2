---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import FooterNew from "../components/FooterNew.astro";

const pageTitle = "Robert Ventures: Questions";
const pageDescription =
    "Complete the second step of your account setup with Robert Ventures.";

// Investment amount options for better maintainability
const investmentAmounts = [
    { value: "1000", label: "$1,000" },
    { value: "5000", label: "$5,000" },
    { value: "10000", label: "$10,000" },
    { value: "25000", label: "$25,000" },
    { value: "50000", label: "$50,000" },
    { value: "100000", label: "$100,000+" }
];

// Alternative assets options
const alternativeAssetsOptions = [
    { value: "yes", label: "Yes" },
    { value: "no", label: "No" }
];
---

<!doctype html>
<html lang="en">
    <head>
        <BaseHead title={pageTitle} description={pageDescription} />
        <meta name="robots" content="noindex, nofollow" />
        <style>

            .section-container {
                max-width: 1280px;
                margin: 0 auto;
                border-radius: 1rem;
                background: #fff;
                padding: 3rem 1.5rem;
            }

            .section-content {
                max-width: 640px;
                margin: 0 auto;
            }

            h1 {
                color: #000;
                text-align: center;
                font-family: "Satoshi", sans-serif;
                font-size: 1.75rem;
                font-weight: 700;
                margin-bottom: 1.5rem;
                max-width: 366px;
                margin-left: auto;
                margin-right: auto;
            }

            .portfolio-info {
                font-size: 1.25rem;
                font-family: "Inter", sans-serif;
                color: #000000;
                font-weight: 500;
                margin-bottom: 0.5rem;
                line-height: 1.75;
            }
            
            .portfolio-value-container, 
            .investment-urgency-options {
                display: flex;
                flex-direction: column;
                gap: 1rem;
                margin-bottom: 1rem;
            }

            .investment-method-options {
                display: flex;
                flex-direction: row;
                gap: 0;
                justify-content: space-between;
                width: 100%;
                margin: 0 auto 1rem auto;
            }

            .investment-method-options label {
                width: 50%;
                justify-content: flex-start;
                min-width: unset;
            }

            form {
                display: flex;
                flex-direction: column;
                max-width: 366px;
                margin: 0 auto;
            }

            button {
                background-color: #5028ff;
                color: #fff;
                padding: 15px;
                line-height: 1;
                font-family: Inter, sans-serif;
                font-size: 1.125rem;
                font-weight: 500;
                border-radius: 0.75rem;
                border: 1px solid #5028ff;
                margin-top: 2rem;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: background-color 0.2s ease;
            }

            button:hover {
                background-color: #3f1fd1;
            }

            button:disabled {
                background-color: #6b5b7b;
                cursor: not-allowed;
            }

            .loader {
                width: 10px;
                height: 10px;
                border-radius: 50%;
                background-color: white;
                display: inline-block;
                animation: pulse 1s infinite;
                margin-left: 10px;
            }

            @keyframes pulse {
                0% {
                    transform: scale(1);
                    opacity: 1;
                }
                50% {
                    transform: scale(1.5);
                    opacity: 0.5;
                }
                100% {
                    transform: scale(1);
                    opacity: 1;
                }
            }

            input[type="radio"] {
                width: 18px;
                height: 18px;
                accent-color: #5028ff;
            }

            label {
                display: flex;
                align-items: center;
                gap: 0.75rem;
                cursor: pointer;
                padding: 0.5rem;
                border-radius: 0.5rem;
                transition: background-color 0.2s ease;
            }

            label:hover {
                background-color: #f8f9fa;
            }

            span.defocus {
                font-weight: 300;
                font-size: 1.125rem;
                color: #6b7280;
            }

            @media only screen and (min-width: 768px) {
                section {
                    padding: 0 2rem;
                }
            }

            @media only screen and (min-width: 990px) {
                .section-container {
                    padding: 4rem 1.5rem;
                }
                .section-content {
                    max-width: 921px;
                }
            }
        </style>
    </head>

    <body>
        <Header />

        <section>
            <div class="section-container">
                <div class="section-content">
                    <h1>Questions to Personalize Your Experience</h1>
                    <form
                        id="questions"
                        action="/api/questions"
                        method="post"
                    >
                        <p class="portfolio-info">
                            How much are you looking to invest?
                        </p>
                        <div class="portfolio-value-container">
                            {investmentAmounts.map((option) => (
                                <label>
                                    <input
                                        type="radio"
                                        name="invest_intent"
                                        value={option.value}
                                        required={option.value === "1000"}
                                    />
                                    {option.label}
                                </label>
                            ))}
                        </div>

                        <p class="portfolio-info">
                            Have you invested in alternative assets before? 
                            <span class="defocus"> (private companies, real estate, debt funds, bonds, crypto, etc.) </span>
                        </p>
                        <div class="investment-method-options">
                            {alternativeAssetsOptions.map((option) => (
                                <label>
                                    <input
                                        type="radio"
                                        name="investment_method"
                                        value={option.value}
                                        required={option.value === "yes"}
                                    />
                                    {option.label}
                                </label>
                            ))}
                        </div>

                        <button type="submit">
                            <span class="button-text">COMPLETE REGISTRATION</span>
                            <span class="loader" style="display: none;"></span>
                        </button>
                    </form>
                </div>
            </div>
        </section>
        
        <FooterNew />
    </body>
</html>

<script>
    // Function to trigger events for Microsoft Clarity and GA4
    function triggerEvent(eventName: string, clarityEventName: string) {
        // Push event to Google Tag Manager's dataLayer
        if ((window as any).dataLayer) {
            (window as any).dataLayer.push({
                'event': eventName
            });
            console.log('GA4 event triggered: ' + eventName);
        } else {
            console.warn('dataLayer is not defined. Ensure Google Tag Manager is properly initialized.');
        }

        // Send event to Microsoft Clarity
        if (typeof (window as any).clarity === 'function') {
            (window as any).clarity('event', clarityEventName);
            console.log('Clarity event triggered: ' + clarityEventName);
        } else {
            console.warn('Microsoft Clarity is not initialized.');
        }
    }

    // Form submission handler
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById("questions") as HTMLFormElement;
        if (!form) return;

        form.addEventListener("submit", async (e) => {
            e.preventDefault();

            const button = form.querySelector("button[type='submit']") as HTMLButtonElement;
            const buttonText = button.querySelector(".button-text") as HTMLElement;
            const loader = button.querySelector(".loader") as HTMLElement;
            const formData = new FormData(form);

            // Disable button and show loader
            button.disabled = true;
            buttonText.style.display = "none";
            loader.style.display = "inline-block";

            // Retrieve GoHighLevel Contact ID from localStorage
            const ghlContactId = localStorage.getItem("ghl_contact_id");
            if (!ghlContactId) {
                console.warn("GoHighLevel Contact ID not found in localStorage!");
            } else {
                console.log("Retrieved GHL Contact ID from localStorage:", ghlContactId);
                formData.append("ghl_contact_id", ghlContactId);
            }

            // Store form answers in localStorage
            const investIntent = formData.get("invest_intent");
            const alternativeAssets = formData.get("investment_method");
            localStorage.setItem("invest_intent", investIntent?.toString() || "");
            localStorage.setItem("alternative_assets", alternativeAssets?.toString() || "");

            // Add webinar sign-up date from localStorage if available
            const webinarSignUpDate = localStorage.getItem("webinar_sign_up_date");
            if (webinarSignUpDate) {
                formData.append("webinar_sign_up_date", webinarSignUpDate);
                console.log("✅ Added webinar sign-up date to form data:", webinarSignUpDate);
            }

            console.log("Stored answers in localStorage:", {
                investIntent,
                alternativeAssets,
            });

            try {
                const response = await fetch(form.action, {
                    method: form.method,
                    body: formData,
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log("Questions Completed:", result);
                    
                    // Trigger GA4 and Clarity events for questions completion
                    triggerEvent("questions_completed", "questionsCompleted");
                    triggerEvent("portfolio_value_added", "portfolioValueAdded");
                    
                    window.location.href = "/webinar-thank-you/";
                } else {
                    const error = await response.json();
                    console.error("Signup failed:", error.error);
                    alert("There was an error completing your registration. Please try again.");
                }
            } catch (err) {
                console.error("Error during signup:", err);
                alert("There was an error completing your registration. Please try again.");
            } finally {
                // Re-enable button and hide loader
                button.disabled = false;
                buttonText.style.display = "inline";
                loader.style.display = "none";
            }
        });
    });
</script>
