---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import FooterNew from "../components/FooterNew.astro";

const pageTitle = "Robert Ventures: Questions";
const pageDescription =
    "Complete the second step of your account setup with Robert Ventures.";

// Investment amount options for better maintainability
const investmentAmounts = [
    { value: "1000", label: "$1,000" },
    { value: "5000", label: "$5,000" },
    { value: "10000", label: "$10,000" },
    { value: "25000", label: "$25,000" },
    { value: "50000", label: "$50,000" },
    { value: "100000", label: "$100,000+" }
];

// Alternative assets experience options (yes/no)
const alternativeAssetsOptions = [
    { value: "yes", label: "Yes" },
    { value: "no", label: "No" }
];

// Age bracket options
const ageBracketOptions = [
    { value: "18_34", label: "18 to 34" },
    { value: "35_44", label: "35 to 44" },
    { value: "45_54", label: "45 to 54" },
    { value: "55_plus", label: "55+" }
];

// Primary investment objective options (single select)
const investmentObjectivesOptions = [
    { value: "Long Term Growth", label: "Long-Term Capital Growth" },
    { value: "Portfolio Diversification", label: "Diversify My Portfolio for Risk Reduction" },
    { value: "Monthly Income", label: "Generate Monthly or Passive Income" },
    { value: "Tax Advantaged IRA Growth", label: "Pursue Tax-Advantaged Growth" },
    // { value: "Inflation Protection", label: "Protect Savings from Inflation" },
    // { value: "Short Term Returns", label: "Short-Term Gains or Quick Returns" }
];
---

<!doctype html>
<html lang="en">
    <head>
        <BaseHead title={pageTitle} description={pageDescription} />
        <meta name="robots" content="noindex, nofollow" />
        <style>

            .section-container {
                max-width: 1280px;
                margin: 0 auto;
                border-radius: 1rem;
                background: #fff;
                padding: 3rem 1.5rem;
            }

            .section-content {
                max-width: 640px;
                margin: 0 auto;
            }

            h1 {
                color: #000;
                text-align: center;
                font-family: "Satoshi", sans-serif;
                font-size: 1.75rem;
                font-weight: 700;
                margin-bottom: 1.5rem;
                max-width: 366px;
                margin-left: auto;
                margin-right: auto;
            }

            .portfolio-info {
                font-size: 1.25rem;
                font-family: "Inter", sans-serif;
                color: #000000;
                font-weight: 500;
                margin-bottom: 0.5rem;
                line-height: 1.75;
            }
            
            /* Portfolio value as a grid of selectable boxes */
            .portfolio-value-container {
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 0.75rem;
                margin-bottom: 1.5rem;
            }

            /* Objectives as a grid of selectable boxes */
            .objectives-container {
                display: grid;
                grid-template-columns: 1fr;
                gap: 0.75rem;
                margin-bottom: 2rem;
            }

            form {
                display: flex;
                flex-direction: column;
                max-width: 640px;
                margin: 0 auto;
            }

            button {
                background-color: #5028ff;
                color: #fff;
                padding: 15px;
                line-height: 1;
                font-family: Inter, sans-serif;
                font-size: 1.125rem;
                font-weight: 500;
                border-radius: 0.75rem;
                border: 1px solid #5028ff;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: background-color 0.2s ease;
            }

            button:hover {
                background-color: #3f1fd1;
            }

            button:disabled {
                background-color: #6b5b7b;
                cursor: not-allowed;
            }

            .loader {
                width: 10px;
                height: 10px;
                border-radius: 50%;
                background-color: white;
                display: inline-block;
                animation: pulse 1s infinite;
                margin-left: 10px;
            }

            @keyframes pulse {
                0% {
                    transform: scale(1);
                    opacity: 1;
                }
                50% {
                    transform: scale(1.5);
                    opacity: 0.5;
                }
                100% {
                    transform: scale(1);
                    opacity: 1;
                }
            }

            input[type="radio"] {
                width: 18px;
                height: 18px;
                accent-color: #5028ff;
            }

            label {
                display: flex;
                align-items: center;
                gap: 0.75rem;
                cursor: pointer;
                padding: 0.5rem;
                border-radius: 0.5rem;
                transition: background-color 0.2s ease;
            }

            label:hover {
                background-color: #f8f9fa;
            }

            /* Portfolio grid item styles */
            .portfolio-option-label {
                display: block;
                padding: 0;
            }
            .portfolio-option-label input[type="radio"] {
                position: absolute;
                opacity: 0;
                width: 0;
                height: 0;
                pointer-events: none;
            }
            .option-box {
                display: block;
                width: 100%;
                text-align: center;
                padding: 0.75rem 1rem;
                border: 1px solid #e5e7eb; /* gray-200 */
                border-radius: 0.75rem;
                background: #ffffff;
                color: #111827; /* gray-900 */
                font-family: Inter, sans-serif;
                font-size: 1rem;
                font-weight: 500;
                line-height: 1;
                transition: background-color 0.15s ease, border-color 0.15s ease, box-shadow 0.15s ease, color 0.15s ease;
            }
            .portfolio-option-label:hover .option-box {
                background-color: #f8f9fa;
            }
            .portfolio-option-label input[type="radio"]:focus + .option-box {
                box-shadow: 0 0 0 2px rgba(80, 40, 255, 0.2) inset;
            }
            .portfolio-option-label input[type="radio"]:checked + .option-box {
                border-color: #5028ff;
                background-color: #f2f0ff;
                color: #1f2937; /* gray-800 */
                box-shadow: 0 0 0 2px rgba(80, 40, 255, 0.1) inset;
            }

            /* Objectives grid item styles (radios) */
            .objectives-option-label {
                display: block;
                padding: 0;
            }
            .objectives-option-label input[type="radio"] {
                position: absolute;
                opacity: 0;
                width: 0;
                height: 0;
                pointer-events: none;
            }
            .objectives-option-label:hover .option-box {
                background-color: #f8f9fa;
            }
            .objectives-option-label input[type="radio"]:focus + .option-box {
                box-shadow: 0 0 0 2px rgba(80, 40, 255, 0.2) inset;
            }
            .objectives-option-label input[type="radio"]:checked + .option-box {
                border-color: #5028ff;
                background-color: #f2f0ff;
                color: #1f2937;
                box-shadow: 0 0 0 2px rgba(80, 40, 255, 0.1) inset;
            }

            span.defocus {
                font-weight: 300;
                font-size: 1.125rem;
                color: #6b7280;
            }

            @media only screen and (min-width: 768px) {
                section {
                    padding: 0 2rem;
                }
                .portfolio-value-container {
                    grid-template-columns: repeat(2, 1fr);
                }
                .objectives-container {
                    grid-template-columns: 1fr;
                }
            }

            @media only screen and (min-width: 990px) {
                .section-container {
                    padding: 4rem 1.5rem;
                }
                .section-content {
                    max-width: 921px;
                }
            }
        </style>
    </head>

    <body>
        <Header />

        <section>
            <div class="section-container">
                <div class="section-content">
                    <h1>Questions to Personalize Your Experience</h1>
                    <form
                        id="questions"
                        action="/api/questions"
                        method="post"
                    >

                        <p class="portfolio-info">
                            Have You Invested in Alternative Assets Before?
                        </p>
                        <div class="portfolio-value-container">
                            {alternativeAssetsOptions.map((option) => (
                                <label class="portfolio-option-label">
                                    <input
                                        type="radio"
                                        name="alternative_assets"
                                        value={option.value}
                                        required={true}
                                    />
                                    <span class="option-box">{option.label}</span>
                                </label>
                            ))}
                        </div>

                        <p class="portfolio-info">
                            What is your age range?
                        </p>
                        <div class="portfolio-value-container">
                            {ageBracketOptions.map((option) => (
                                <label class="portfolio-option-label">
                                    <input
                                        type="radio"
                                        name="age_bracket"
                                        value={option.value}
                                        required={true}
                                    />
                                    <span class="option-box">{option.label}</span>
                                </label>
                            ))}
                        </div>

                        <p class="portfolio-info">
                            What Is Your Primary Investment Objective?
                        </p>
                        <div class="objectives-container">
                            {investmentObjectivesOptions.map((option) => (
                                <label class="objectives-option-label">
                                    <input
                                        type="radio"
                                        name="primary_investment_objective"
                                        value={option.value}
                                        required={true}
                                    />
                                    <span class="option-box">{option.label}</span>
                                </label>
                            ))}
                        </div>

                        <button type="submit">
                            <span class="button-text">COMPLETE REGISTRATION</span>
                            <span class="loader" style="display: none;"></span>
                        </button>
                    </form>
                </div>
            </div>
        </section>
        
        <FooterNew />
    </body>
</html>

<script>
    // Function to trigger events for Microsoft Clarity and GA4
    function triggerEvent(eventName: string, clarityEventName: string) {
        // Push event to Google Tag Manager's dataLayer
        if ((window as any).dataLayer) {
            (window as any).dataLayer.push({
                'event': eventName
            });
            console.log('GA4 event triggered: ' + eventName);
        } else {
            console.warn('dataLayer is not defined. Ensure Google Tag Manager is properly initialized.');
        }

        // Send event to Microsoft Clarity
        if (typeof (window as any).clarity === 'function') {
            (window as any).clarity('event', clarityEventName);
            console.log('Clarity event triggered: ' + clarityEventName);
        } else {
            console.warn('Microsoft Clarity is not initialized.');
        }
    }

    // Form submission handler
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById("questions") as HTMLFormElement;
        if (!form) return;

        // No multi-select limit needed for primary objective (single select)

        form.addEventListener("submit", async (e) => {
            e.preventDefault();

            const button = form.querySelector("button[type='submit']") as HTMLButtonElement;
            const buttonText = button.querySelector(".button-text") as HTMLElement;
            const loader = button.querySelector(".loader") as HTMLElement;
            const formData = new FormData(form);

            // Disable button and show loader
            button.disabled = true;
            buttonText.style.display = "none";
            loader.style.display = "inline-block";

            // Retrieve GoHighLevel Contact ID from localStorage
            const ghlContactId = localStorage.getItem("ghl_contact_id");
            if (!ghlContactId) {
                console.warn("GoHighLevel Contact ID not found in localStorage!");
            } else {
                console.log("Retrieved GHL Contact ID from localStorage:", ghlContactId);
                formData.append("ghl_contact_id", ghlContactId);
            }

            // Store form answers in localStorage
            const alternativeAssets = formData.get("alternative_assets");
            const primaryInvestmentObjective = formData.get("primary_investment_objective");
            const ageBracket = formData.get("age_bracket");

            localStorage.setItem("alternative_assets", alternativeAssets?.toString() || "");
            localStorage.setItem("primary_investment_objective", primaryInvestmentObjective?.toString() || "");
            localStorage.setItem("age_bracket", ageBracket?.toString() || "");

            // Add webinar sign-up date from localStorage if available
            const webinarSignUpDate = localStorage.getItem("webinar_sign_up_date");
            if (webinarSignUpDate) {
                formData.append("webinar_sign_up_date", webinarSignUpDate);
                console.log("✅ Added webinar sign-up date to form data:", webinarSignUpDate);
            }



            console.log("Stored answers in localStorage:", { primaryInvestmentObjective });

            try {
                const response = await fetch(form.action, {
                    method: form.method,
                    body: formData,
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log("Questions Completed:", result);
                    
                    // Trigger GA4 and Clarity events for questions completion
                    triggerEvent("questions_completed", "questionsCompleted");
                    triggerEvent("portfolio_value_added", "portfolioValueAdded");
                    
                    window.location.href = "/webinar-thank-you";
                } else {
                    const error = await response.json();
                    console.error("Signup failed:", error.error);
                    alert("There was an error completing your registration. Please try again.");
                }
            } catch (err) {
                console.error("Error during signup:", err);
                alert("There was an error completing your registration. Please try again.");
            } finally {
                // Re-enable button and hide loader
                button.disabled = false;
                buttonText.style.display = "inline";
                loader.style.display = "none";
            }
        });
    });
</script>
