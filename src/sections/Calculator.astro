---

---

<style>
    
</style>

<section>
    <div class="section-container">
        <div class="section-content">
                <h2>Bond Terms Available</h2>
        
                <div class="financial-future-section">
                    <div class="calculate-content">
        
                            <div class="calculate-block">
                                <p class="calculate-heading">Terms:</p>
                                <div id="term" class="calculate-data">
                                    <div class="calculate-data-group year-option">
                                        <input
                                            type="radio"
                                            name="year-term"
                                            value="3"
                                            checked
                                            onclick="calculateReturns()"
                                        />
                                        <label for="css">3 Years - 10% APY</label><br />
                                    </div>
        
                                    <div class="calculate-data-group year-option">
                                        <input
                                            type="radio"
                                            name="year-term"
                                            value="1"
                                            onclick="calculateReturns()"
                                        />
                                        <label for="html">1 Year - 8% APY</label><br />
                                    </div>
                                </div>
                            </div>
        
                            <div class="calculate-block">
                                <p class="calculate-heading">Return Options:</p>
                                <div class="calculate-data">
                                    <div class="calculate-data-group return-option">
                                        <input
                                            type="radio"
                                            name="payment-term"
                                            value="compound"
                                            onclick="calculateReturns()"
                                            checked
                                        />
                                        <label for="css">Compound</label><br />
                                    </div>
        
                                    <div class="calculate-data-group return-option">
                                        <input
                                            type="radio"
                                            name="payment-term"
                                            value="monthly"
                                            onclick="calculateReturns()"
                                        />
                                        <label for="html">Monthly</label><br />
                                    </div>
                                </div>
                            </div>
        
                            <div class="calculate-block">
                                <div class="initial-investment-text">
                                    <p class="calculate-heading">Initial Investment:</p>
                                </div>
                                <input
                                    id="amount"
                                    class="amount styled-input"
                                    type="number"
                                    name="amount"
                                    value="50000"
                                    step="1000"
                                    min="1000"
                                    max="100000"
                                    oninput="calculateReturns()"
                                />
                            </div>
                    </div>
                </div>
        
                <div class="result-section">
                    <div class="result-block wrapper">
                        <p class="title">Total value with interest:</p>
                        <div class="value">
                                <path
                                    d="M4.5 15L12 7.5L19.5 15"
                                    stroke="#17A814"
                                    stroke-width="4"
                                    stroke-linecap="square"></path>
                            </svg>
                            <p id="total-profit">TotalAmount</p>
                        </div>
                        <div class="result-block calc-final-block">
                            <p class="title small">Compound interest:</p>
                            <p class="value small" id="return-value">CompoundReturn</p>
                        </div>
        
        
                    </div>
                </div>
        </div>
    </div>
</section>

<script is:inline>
    // Selectors
const investmentAmountInput = document.getElementById("amount");
const totalProfitElement = document.getElementById("total-profit");
const returnValueElement = document.getElementById("return-value");
const amountHeading = document.querySelector("p.amount-heading");
const resultTitles = document.querySelectorAll(".result-section p.title");
const yearTermInputs = document.querySelectorAll(".year-option");
const returnOptions = document.querySelectorAll(".return-option");

// Helper function for formatting currency and wrapping cents
function formatCurrencyWithCents(value) {
    const formatted = value.toLocaleString("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    const [dollars, cents] = formatted.split('.');
    return `${dollars}<span class="cents">.${cents}</span>`;
}

// Helper function to handle toggling active class
function toggleActiveClass(group) {
    group.forEach((item) => {
        const input = item.querySelector("input");
        if (input?.checked) {
            item.classList.add("selection-active");
        } else {
            item.classList.remove("selection-active");
        }
    });
}

// Calculate Returns
function calculateReturns() {
    const paymentTerm = document.querySelector('input[name="payment-term"]:checked')?.value;
    const investmentAmount = parseFloat(investmentAmountInput.value) || 0;
    const investmentDuration = parseFloat(document.querySelector('input[name="year-term"]:checked')?.value) || 0;

    const nominalAnnualRate = investmentDuration === 3 ? 0.10 : 0.08;
    const totalMonths = investmentDuration * 12;

    let totalInterest = 0;
    let totalPrincipal = investmentAmount;
    let monthlyPayment = 0;

    if (paymentTerm === "monthly") {
        // Monthly Payments Calculation
        const monthlyRate = nominalAnnualRate / 12;
        monthlyPayment = investmentAmount * monthlyRate;

        // Total Interest over the period
        totalInterest = monthlyPayment * totalMonths;

        // Total Principal includes the total interest
        totalPrincipal = investmentAmount + totalInterest;
    } else {
        // Compound Interest Calculation
        let effectiveAnnualRate;
        if (investmentDuration === 3) {
            // For durations of 3 years, use 10% APR compounded monthly
            effectiveAnnualRate = 0.104713; // Approximately 10.4713%
        } else {
            // For durations of 1 year, use 8% APR compounded monthly
            effectiveAnnualRate = 0.083; // Approximately 8.3%
        }

        totalPrincipal = investmentAmount * Math.pow(1 + effectiveAnnualRate, investmentDuration);
        totalInterest = totalPrincipal - investmentAmount;
    }

    // Update UI
    if (paymentTerm === "monthly") {
        resultTitles[0].textContent = "Total Value with Interest:";
        resultTitles[1].textContent = "Monthly Payments:";
        const formattedTotalPrincipal = formatCurrencyWithCents(totalPrincipal);
        totalProfitElement.innerHTML = `$${formattedTotalPrincipal}`;

        // Calculate compound value for comparison
        let effectiveAnnualRateForCompounding;
        if (investmentDuration === 3) {
            effectiveAnnualRateForCompounding = 0.104713;
        } else {
            effectiveAnnualRateForCompounding = 0.083;
        }
        const compoundedValue = investmentAmount * Math.pow(1 + effectiveAnnualRateForCompounding, investmentDuration);

        const extraEarnings = compoundedValue - totalPrincipal;

        const formattedMonthlyPayment = formatCurrencyWithCents(monthlyPayment);
        const formattedExtraEarnings = formatCurrencyWithCents(extraEarnings);

        document.querySelector(".calc-final-block").style.display = "block";

        returnValueElement.innerHTML = `
            <div>$${formattedMonthlyPayment}</div>
            <p class="link-to-compound">
                Earn 
                <span class="green">$${formattedExtraEarnings}</span> more with compound payments
            </p>`;
    } else {
        resultTitles[0].textContent = "Total value with interest:";
        resultTitles[1].textContent = "Compound interest:";
        const formattedTotalPrincipal = formatCurrencyWithCents(totalPrincipal);
        const formattedTotalInterest = formatCurrencyWithCents(totalInterest);
        totalProfitElement.innerHTML = `$${formattedTotalPrincipal}`;
        returnValueElement.innerHTML = `
            $${formattedTotalInterest} 
            <span class="result-block-extra-info">
                (${investmentDuration === 3 ? "10% APY" : "8% Annually"})
            </span>`;
        document.querySelector(".calc-final-block").style.display = "none";
    }

    const formattedInvestmentAmount = formatCurrencyWithCents(investmentAmount);
    amountHeading.innerHTML = `$${formattedInvestmentAmount}`;
}

// Initialize sliders with style updates
document.querySelectorAll('input[type="range"].slider-progress').forEach((slider) => {
    const updateSliderStyle = () => {
        slider.style.setProperty("--value", slider.value);
        slider.style.setProperty("--min", slider.min || "0");
        slider.style.setProperty("--max", slider.max || "100");
    };

    updateSliderStyle(); // Set initial styles
    slider.addEventListener("input", () => {
        updateSliderStyle(); // Update on input
        calculateReturns();
    });
});

// Initialize input number with style updates
document.querySelectorAll('input[type="number"].styled-input').forEach((input) => {
    input.addEventListener("input", () => {
        calculateReturns();
    });
});

// Add Event Listeners for year-term and return options
[...yearTermInputs, ...returnOptions].forEach((option) => {
    const radioButton = option.querySelector("input");

    if (radioButton?.checked) {
        option.classList.add("selection-active"); // Apply active class to default selected option
    }

    option.addEventListener("click", () => {
        // Ensure radio buttons are toggled correctly
        if (radioButton) radioButton.checked = true;

        // Update active classes dynamically
        if (radioButton.name === "year-term") {
            toggleActiveClass(yearTermInputs);
        } else if (radioButton.name === "payment-term") {
            toggleActiveClass(returnOptions);
        }
        calculateReturns();
    });
});

// Initial Calculation
calculateReturns();
</script>
