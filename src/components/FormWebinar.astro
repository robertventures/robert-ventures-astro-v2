---

---

<style>
    .time {
        display: flex;
        justify-content: space-around;

        margin-top: 1rem;
        margin-bottom: 1rem;
    }

    .time div {
        font-weight: 600;
    }
    .form {
        max-width: 366px;

        margin: 0 auto;
    }

    .form-block {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-shrink: 0;
        margin: 0 auto;

        flex-direction: column;
        gap: 0.75rem;

        width: 100%;
        box-sizing: border-box;

        margin-bottom: 1.25rem;
    }

    .name {
        display: flex;
        gap: 0.75rem;
        width: 100%;
    }

    input,
    select {
        border: none;
        flex-grow: 1; /* Allow the input to grow */
        border: 1px solid #afb5bc;
        padding: 1rem 0.75rem;
        width: 100%;
        box-sizing: border-box;

        border-radius: 0.75rem;
    }

    input::placeholder,
    select:invalid {
        color: #737373;
        opacity: 1;
    }

    select {
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        background-color: #fff;
        border: 1px solid #afb5bc;
        width: 100%;

        color: #737373;
    }
    select:required:not(:invalid) {
        color: #1d1d1f;
    }

    button {
        background-color: #5028ff;
        border: none;
        color: #fff;
        border-radius: 0.75rem;

        padding: 1rem 0.75rem;

        font-size: 1.125rem;
        font-weight: 500;

        width: 100%;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .signup-error {
        display: none;
        color: red;
        text-align: center;
        margin-top: 0.5rem;
    }

    .loader {
        border: 2px solid #ffffff80; /* semi-transparent white */
        border-top: 2px solid #fff;  /* solid white for the spinner */
        border-radius: 50%;
        width: 24px;
        height: 24px;
        animation: spin 1s linear infinite;
        display: none;
        margin-left: 0.5rem;
    }

    @keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    @media only screen and (min-width: 990px) {
        .account {
            max-width: none;
        }
    }
</style>

<div class="form">
    <form class="form-cta">
        <h3>Next session in:</h3>
        <div class="time">
            <div class="days">
                <span>0</span>
                <p>days</p>
            </div>
            <div class="hours">
                <span>0</span>
                <p>hours</p>
            </div>
            <div class="minutes">
                <span>0</span>
                <p>minutes</p>
            </div>
            <div class="seconds">
                <span>0</span>
                <p>seconds</p>
            </div>
        </div>
        <div class="form-block">
            <select name="session" required>
                <option value="" disabled selected>Select an upcoming session</option>
            </select>
            <div class="name">
                <input
                    type="text"
                    name="first_name"
                    placeholder="First Name"
                    required
                    class="email-input"
                />
                <input
                    type="text"
                    name="last_name"
                    placeholder="Last Name"
                    required
                    class="email-input"
                />
            </div>
            <input
                type="email"
                name="email"
                placeholder="Enter Your Email"
                required
                class="email-input"
            />
            <input
                type="tel"
                name="phone_number"
                placeholder="Phone Number"
                required
            />
            <select name="invest_intent" required>
                <option disabled selected>How much are you looking to invest?</option>
                <option value="1000">1k</option>
                <option value="5000">5k</option>
                <option value="10000">10k</option>
                <option value="25000">25k</option>
                <option value="50000">50k</option>
                <option value="100000">100k+</option>
            </select>
            <input
                type="text"
                name="bot-field"
                class="bot-field"
                style="display: none;"
            />
        </div>
        <button type="submit">
          <span class="button-text">REGISTER NOW</span>
          <span class="loader" style="display: none;"></span>
        </button>
        <p class="signup-error"></p>
    </form>
</div>

<script>
window.addEventListener("DOMContentLoaded", async () => {
  // Fetch webinar data once
  let data;
  try {
    const response = await fetch("/api/webinar-data");
    if (!response.ok) {
      console.error("Failed to fetch webinar data:", response.statusText);
      return;
    }
    data = await response.json();
  } catch (err) {
    console.error("An error occurred while fetching webinar data:", err);
    return;
  }

  // For each form instance on the page
  document.querySelectorAll(".form").forEach((formContainer) => {
    const form = formContainer.querySelector("form.form-cta");
    const selectEl = form.querySelector("select[name='session']");
    const phoneInput = form.querySelector("input[name='phone_number']");
    const daysSpan = formContainer.querySelector(".days span");
    const hoursSpan = formContainer.querySelector(".hours span");
    const minutesSpan = formContainer.querySelector(".minutes span");
    const secondsSpan = formContainer.querySelector(".seconds span");
    const signupError = form.querySelector(".signup-error");
    const submitButton = form.querySelector("button[type='submit']");
    const buttonText = submitButton.querySelector(".button-text");
    const loader = submitButton.querySelector(".loader");

    // Populate session select
    const sessions = data.results.filter((item) => {
      try {
        const parsed = JSON.parse(item.id);
        return parsed && parsed.type === "ongoing";
      } catch {
        return false;
      }
    });
    selectEl.innerHTML = '<option value="" disabled selected>Select an upcoming session</option>';
    sessions.forEach(session => {
      const details = JSON.parse(session.id);
      const timeStr = `${details.time} ${details.period}`;
      const nextDate = computeSessionDate(details.day, timeStr, details.timeZone);
      const option = document.createElement("option");
      option.value = session.id;
      option.setAttribute("data-date", nextDate.toISOString());
      option.setAttribute("data-timezone", details.timeZone);
      option.textContent = session.label.replace(/^Every\s+/i, "");
      selectEl.appendChild(option);
    });

    // Timer logic
    function getNextSessionDate(sessions) {
      let closest = null;
      console.log(sessions)
      sessions.forEach(session => {
        const details = JSON.parse(session.id);
        const date = computeSessionDate(details.day, `${details.time} ${details.period}`, details.timeZone);
        if (!closest || date < closest) closest = date;
      });
      return closest;
    }

    function computeSessionDate(weekdayName, timeStr, timeZone) {
      const daysOfWeek = { Sunday: 0, Monday: 1, Tuesday: 2, Wednesday: 3, Thursday: 4, Friday: 5, Saturday: 6 };
      const targetDay = daysOfWeek[weekdayName];

      // Always use UTC for calculations
      const now = new Date();
      // Get the current time in the session's time zone
      const tzNow = new Date(now.toLocaleString("en-US", { timeZone }));

      let result = new Date(tzNow);
      result.setDate(result.getDate() + ((7 + targetDay - result.getDay()) % 7));
      const [time, period] = timeStr.split(" ");
      let [hours, minutes] = time.split(":").map(Number);
      if (period === "PM" && hours !== 12) hours += 12;
      if (period === "AM" && hours === 12) hours = 0;
      result.setHours(hours, minutes, 0, 0);

      // If the session time has already passed for this week, move to next week
      if (result <= tzNow) result.setDate(result.getDate() + 7);

      // Convert the result to UTC timestamp
      return new Date(result.toLocaleString("en-US", { timeZone: "UTC" }));
    }

    function updateCountdown(targetDate) {
      // Always use UTC for now
      const now = new Date();
      const nowUTC = new Date(now.toLocaleString("en-US", { timeZone: "UTC" }));
      const target = targetDate instanceof Date ? targetDate : new Date(targetDate);
      const dist = target.getTime() - nowUTC.getTime();
      const d = Math.floor(dist / (1000 * 60 * 60 * 24));
      const h = Math.floor((dist % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const m = Math.floor((dist % (1000 * 60 * 60)) / (1000 * 60));
      const s = Math.floor((dist % (1000 * 60)) / 1000);
      if (daysSpan) daysSpan.textContent = d > 0 ? String(d) : "0";
      if (hoursSpan) hoursSpan.textContent = h > 0 ? String(h) : "0";
      if (minutesSpan) minutesSpan.textContent = m > 0 ? String(m) : "0";
      if (secondsSpan) secondsSpan.textContent = s > 0 ? String(s) : "0";
    }

    const nextSessionDate = getNextSessionDate(sessions);
    if (nextSessionDate) {
      updateCountdown(nextSessionDate);
      setInterval(() => updateCountdown(nextSessionDate), 1000);
    }

    // Phone input formatting
    if (phoneInput) {
      phoneInput.addEventListener("input", (e) => {
        let value = e.target.value.replace(/\D/g, ""); // Remove non-digits
        if (!value.startsWith("1")) value = "1" + value;
        let formatted = "+1";
        if (value.length > 1) formatted += " (" + value.slice(1, 4);
        if (value.length >= 4) formatted += ") " + value.slice(4, 7);
        if (value.length >= 7) formatted += "-" + value.slice(7, 11);
        e.target.value = formatted;
      });
    }

    // Form submission
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      signupError.textContent = "";
      buttonText.style.display = "none";
      loader.style.display = "inline-block";
      submitButton.disabled = true;

      const formData = new FormData(form);
      const investIntent = formData.get("invest_intent");
      if (investIntent) {
        localStorage.setItem(
          "invest_intent",
          typeof investIntent === "string" ? investIntent : ""
        );
      }
      const selectedOption = selectEl.querySelector("option:checked");
      const isoDate = selectedOption.getAttribute("data-date");
      const tz = selectedOption.getAttribute("data-timezone");
      const sessionId = JSON.parse(selectedOption.value).id;
      const fullDate = formatFullDate(new Date(isoDate), tz);

      const payload = {
        session: sessionId,
        first_name: formData.get("first_name"),
        last_name: formData.get("last_name"),
        email: formData.get("email"),
        phone_number: (() => {
          const val = formData.get("phone_number");
          return typeof val === "string" ? val.replace(/\D/g, "").replace(/^1/, "") : "";
        })(),
        invest_intent: formData.get("invest_intent"),
        bot_field: formData.get("bot-field"),
        date: isoDate,
        fullDate: fullDate
      };

      try {
        const res = await fetch("/api/webinar-registration", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload)
        });
        if (!res.ok) {
          signupError.textContent = "Registration failed. Please try again.";
          buttonText.style.display = "";
          loader.style.display = "none";
          submitButton.disabled = false;
          return;
        }
        window.location.href = "/webinar-thank-you";
      } catch (err) {
        signupError.textContent = "An error occurred during registration.";
        buttonText.style.display = "";
        loader.style.display = "none";
        submitButton.disabled = false;
      }
    });

    function formatFullDate(dateObj, timeZone) {
      const options = {
        weekday: "long",
        month: "long",
        day: "numeric",
        hour: "numeric",
        minute: "2-digit",
        timeZone: timeZone,
        hour12: true,
        timeZoneName: "shortGeneric"
      };
      const parts = new Intl.DateTimeFormat("en-US", options).formatToParts(dateObj);
      const weekday = parts.find(p => p.type === "weekday").value;
      const month = parts.find(p => p.type === "month").value;
      const day = ordinalSuffix(parts.find(p => p.type === "day").value);
      const hour = parts.find(p => p.type === "hour").value;
      const minute = parts.find(p => p.type === "minute").value;
      const period = parts.find(p => p.type === "dayPeriod").value;
      const tzName = parts.find(p => p.type === "timeZoneName").value;
      return `${weekday}, ${month} ${day} at ${hour}:${minute} ${period} ${tzName}`;
    }

    function ordinalSuffix(day) {
      const d = parseInt(day, 10);
      if (d > 3 && d < 21) return `${d}th`;
      switch (d % 10) {
        case 1: return `${d}st`;
        case 2: return `${d}nd`;
        case 3: return `${d}rd`;
        default: return `${d}th`;
      }
    }
  });
});
</script>