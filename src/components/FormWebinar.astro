---
import Image from "astro/components/Image.astro";

import Opener from "../images/svg/opener.svg";

import usFlag from "../images/usflag.png";
---

<style>
  span.heading {
    background: linear-gradient(90deg, #5028ff 0%, #ff592c 100%);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  .time {
    display: flex;
    justify-content: space-around;

    margin-top: 1rem;
    margin-bottom: 1rem;
  }

  .time div {
    font-weight: 600;
  }
  .form {
    max-width: 366px;

    margin: 0 auto;

    background: #ffffff;
    border-radius: 1rem;
    box-shadow:
      0 10px 25px rgba(0, 0, 0, 0.1),
      0 4px 10px rgba(0, 0, 0, 0.05);

    padding: 1rem;
  }

  .form-block {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-shrink: 0;
    margin: 0 auto;

    flex-direction: column;
    gap: 0.75rem;

    width: 100%;
    box-sizing: border-box;

    margin-bottom: 1.25rem;
  }

  .name {
    display: flex;
    gap: 0.75rem;
    width: 100%;
  }

  .select-container {
    position: relative;
    width: 100%;
  }

  .select-container svg {
    position: absolute;
    right: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    z-index: 1;
  }

  input,
  select {
    border: none;
    flex-grow: 1; /* Allow the input to grow */
    border: 1px solid #afb5bc;
    background-color: #f8f9fa;
    padding: 1rem 0.75rem;
    width: 100%;
    box-sizing: border-box;

    border-radius: 0.75rem;
  }

  input::placeholder,
  select:invalid {
    color: #737373;
    opacity: 1;
  }

  select {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-color: #f8f9fa;
    border: 1px solid #afb5bc;
    width: 100%;

    color: #737373;
  }
  select:required:not(:invalid) {
    color: #1d1d1f;
  }

  /* Keep placeholder text gray even when select is valid */
  select option[disabled] {
    color: #737373 !important;
  }

  button {
    background-color: #5028ff;
    border: none;
    color: #fff;
    border-radius: 0.75rem;

    padding: 1rem 0.75rem;

    font-size: 1.125rem;
    font-weight: 500;

    width: 100%;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .signup-error {
    display: none;
    color: red;
    text-align: center;
    margin-top: 0.5rem;
  }

  .loader {
    border: 2px solid #ffffff80; /* semi-transparent white */
    border-top: 2px solid #fff; /* solid white for the spinner */
    border-radius: 50%;
    width: 24px;
    height: 24px;
    animation: spin 1s linear infinite;
    display: none;
    margin-left: 0.5rem;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  @media only screen and (min-width: 990px) {
    .form {
      max-width: 600px;
    }
  }

  .phone-input-wrapper {
    position: relative;
    width: 100%;
  }
  .phone-input-wrapper .phone-flag {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    width: auto;
    height: 22px;
    object-fit: contain;
    aspect-ratio: 22/16;
    pointer-events: none;
    z-index: 2;
    margin-right: 12px;
  }
  .phone-input-wrapper input[type="tel"] {
    padding-left: calc(22px + 12px + 0.75rem) !important;
  }
</style>

<div class="form">
  <form class="form-cta">
    <h3>Next <span class="heading">Live</span> Webinar:</h3>
    <div class="time">
      <div class="days">
        <span>0</span>
        <p>days</p>
      </div>
      <div class="hours">
        <span>0</span>
        <p>hours</p>
      </div>
      <div class="minutes">
        <span>0</span>
        <p>minutes</p>
      </div>
      <div class="seconds">
        <span>0</span>
        <p>seconds</p>
      </div>
    </div>
    <div class="form-block">
      <div class="select-container">
        <select name="session" required>
          <option value="" disabled selected>Select an upcoming session</option>
        </select>
        <Opener />
      </div>
      <div class="name">
        <input
          type="text"
          name="full_name"
          placeholder="Full Name"
          required
          class="email-input"
        />
      </div>
      <input
        type="email"
        name="email"
        placeholder="Enter Your Email"
        required
        class="email-input"
      />
      <div class="phone-input-wrapper">
        <Image src={usFlag} alt="US Flag" height={22} class="phone-flag" />
        <input
          type="tel"
          name="phone_number"
          placeholder="Phone Number"
          required
        />
      </div>

      <input
        type="text"
        name="bot-field"
        class="bot-field"
        style="display: none;"
      />
    </div>
    <button type="submit">
      <span class="button-text">REGISTER NOW</span>
      <span class="loader" style="display: none;"></span>
    </button>
    <p class="signup-error"></p>
  </form>
</div>

<script>
  window.addEventListener("DOMContentLoaded", async () => {
    // Fetch webinar data once
    let data;
    try {
      const response = await fetch("/api/webinar-data", { cache: "no-store" });
      if (!response.ok) {
        console.error("Failed to fetch webinar data:", response.statusText);
        return;
      }
      data = await response.json();
      console.log("Fetched webinar data:", data);
    } catch (err) {
      console.error("An error occurred while fetching webinar data:", err);
      return;
    }

    // For each form instance on the page
    document.querySelectorAll(".form").forEach((formContainer) => {
      const form = formContainer.querySelector("form.form-cta");
      if (!form) return;

      const selectEl = form.querySelector("select[name='session']");
      const phoneInput = form.querySelector("input[name='phone_number']");
      const daysSpan = formContainer.querySelector(".days span");
      const hoursSpan = formContainer.querySelector(".hours span");
      const minutesSpan = formContainer.querySelector(".minutes span");
      const secondsSpan = formContainer.querySelector(".seconds span");
      const signupError = form.querySelector(".signup-error");
      const submitButton = form.querySelector("button[type='submit']");

      if (
        !selectEl ||
        !daysSpan ||
        !hoursSpan ||
        !minutesSpan ||
        !secondsSpan ||
        !signupError ||
        !submitButton
      ) {
        console.error("Required form elements not found");
        return;
      }

      const buttonText = submitButton.querySelector(".button-text");
      const loader = submitButton.querySelector(".loader");

      if (!buttonText || !loader) {
        console.error("Button elements not found");
        return;
      }

      // Populate session select with times from API
      const sessions = data.results.filter((item) => {
        try {
          const parsed = JSON.parse(item.id);
          return parsed && parsed.type === "ongoing";
        } catch {
          return false;
        }
      });

      // Simple function to get next session date
      function getNextSessionDate(
        weekdayName,
        timeStr,
        periodStr,
        timeZoneStr,
      ) {
        const weekdays = [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
        ];
        const targetDay = weekdays.indexOf(weekdayName);

        const [hours, minutes] = timeStr.split(":").map(Number);
        let hour24 = hours;
        if (periodStr.toUpperCase() === "PM" && hours < 12) hour24 += 12;
        if (periodStr.toUpperCase() === "AM" && hours === 12) hour24 = 0;

        // Get current date in the specified timezone
        const now = new Date();
        const currentTzTime = new Date(
          now.toLocaleString("en-US", {
            timeZone: timeZoneStr || "America/New_York",
          }),
        );

        // Find next occurrence of the target day
        const currentDay = currentTzTime.getDay();
        let daysToAdd = (targetDay - currentDay + 7) % 7;

        // If it's today, check if time has passed
        if (daysToAdd === 0) {
          const currentHour = currentTzTime.getHours();
          const currentMinute = currentTzTime.getMinutes();

          if (
            currentHour > hour24 ||
            (currentHour === hour24 && currentMinute >= minutes)
          ) {
            daysToAdd = 7; // Next week
          }
        }

        // Create the session date in the specified timezone
        const sessionDate = new Date(currentTzTime);
        sessionDate.setDate(sessionDate.getDate() + daysToAdd);
        sessionDate.setHours(hour24, minutes, 0, 0);

        // Convert to UTC properly
        const sessionUTC = new Date(
          sessionDate.getTime() - sessionDate.getTimezoneOffset() * 60000,
        );

        // Adjust for timezone offset
        const tempDate = new Date(sessionDate.toISOString().slice(0, -1));
        const tzOffset =
          new Date(
            tempDate.toLocaleString("en-US", {
              timeZone: timeZoneStr || "America/New_York",
            }),
          ).getTime() - tempDate.getTime();
        const finalSessionUTC = new Date(sessionDate.getTime() - tzOffset);

        console.log("Session date calculated:", finalSessionUTC.toISOString());

        return finalSessionUTC;
      }

      // Process sessions and add to dropdown
      const sessionsWithDates = [];
      sessions.forEach((session) => {
        try {
          const details = JSON.parse(session.id);
          console.log("Session from API:", details);

          // Use the actual date from the API if available
          if (session.date) {
            const nextDate = new Date(session.date);
            sessionsWithDates.push({
              session: session,
              nextDate: nextDate,
            });
          } else {
            // Fallback to calculated date if no date in API
            const nextDate = getNextSessionDate(
              details.day,
              details.time,
              details.period,
              details.timeZone,
            );

            sessionsWithDates.push({
              session: session,
              nextDate: nextDate,
            });
          }
        } catch (error) {
          console.error("Error processing session:", error);
        }
      });

      // Sort by date
      sessionsWithDates.sort(
        (a, b) => a.nextDate.getTime() - b.nextDate.getTime(),
      );

      // Helper to format time left until a date
      function formatTimeLeft(targetDate) {
        const now = new Date();
        let diff = targetDate.getTime() - now.getTime();
        if (diff <= 0) return "(Started)";
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        diff -= days * (1000 * 60 * 60 * 24);
        const hours = Math.floor(diff / (1000 * 60 * 60));
        diff -= hours * (1000 * 60 * 60);
        const minutes = Math.floor(diff / (1000 * 60));
        let result = [];
        if (days > 0) result.push(days + (days === 1 ? " day" : " days"));
        if (hours > 0) result.push(hours + (hours === 1 ? " hour" : " hours"));
        if (minutes > 0 && days === 0)
          result.push(minutes + (minutes === 1 ? " minute" : " minutes"));
        return result.length ? "In " + result.join(" ") : "Soon";
      }

      selectEl.innerHTML =
        '<option value="" disabled selected>Select an upcoming session</option>';
      
      // Only show the next 3 sessions
      sessionsWithDates.slice(0, 3).forEach((item) => {
        const session = item.session;
        const nextDate = item.nextDate;
        const details = JSON.parse(session.id);
        // Get user's timezone for display purposes
        const userTz = Intl.DateTimeFormat().resolvedOptions().timeZone;
        // Format as: Thu, 7/10, 11:00 AM GMT-4
        const weekday = nextDate.toLocaleString("en-US", { weekday: "short" });
        const month = nextDate.getMonth() + 1;
        const day = nextDate.getDate();
        const time = nextDate.toLocaleString("en-US", {
          hour: "numeric",
          minute: "2-digit",
          hour12: true,
        });
        // Get short timezone (e.g., GMT-4)
        const tzMatch = nextDate
          .toLocaleTimeString("en-US", { timeZoneName: "short" })
          .match(/GMT[+-]\d+/);
        const tzShort = tzMatch
          ? tzMatch[0]
          : nextDate
              .toLocaleString("en-US", { timeZoneName: "short" })
              .split(" ")
              .pop();
        const timeLeftString = formatTimeLeft(nextDate);
        const option = document.createElement("option");
        option.value = session.id;
        option.setAttribute("data-date", nextDate.toISOString());
        option.setAttribute("data-timezone", userTz);
        option.setAttribute("data-original-timezone", details.timeZone);
        option.textContent = `${weekday}, ${month}/${day}, ${time} ${tzShort} - ${timeLeftString}`;
        selectEl.appendChild(option);
      });

      // For countdown timer, use the first upcoming session
      if (sessionsWithDates.length > 0) {
        const nextSession = sessionsWithDates[0].nextDate;
        console.log("Next session date for timer:", nextSession.toISOString());
        console.log("Current time:", new Date().toISOString());

        // Update the countdown
        function updateCountdown() {
          const now = new Date();
          const timeLeft = nextSession.getTime() - now.getTime();

          if (timeLeft <= 0) {
            daysSpan.textContent = "0";
            hoursSpan.textContent = "0";
            minutesSpan.textContent = "0";
            secondsSpan.textContent = "0";
            return;
          }

          const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
          const hours = Math.floor(
            (timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60),
          );
          const minutes = Math.floor(
            (timeLeft % (1000 * 60 * 60)) / (1000 * 60),
          );
          const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

          daysSpan.textContent = days.toString();
          hoursSpan.textContent = hours.toString();
          minutesSpan.textContent = minutes.toString();
          secondsSpan.textContent = seconds.toString();
        }

        // Initial update and set interval
        updateCountdown();
        setInterval(updateCountdown, 1000);
      }

      // Phone input formatting
      if (phoneInput) {
        phoneInput.addEventListener("input", (e) => {
          const input = e.target as HTMLInputElement;
          if (!input) return;
          
          // Get cursor position before formatting
          const cursorPosition = input.selectionStart;
          
          // Remove all non-digits
          let value = input.value.replace(/\D/g, "");
          
          // Limit to 10 digits
          if (value.length > 10) {
            value = value.slice(0, 10);
          }
          
          // Format the number
          let formatted = "";
          if (value.length > 0) {
            if (value.length <= 3) {
              formatted = value;
            } else if (value.length <= 6) {
              formatted = `(${value.slice(0, 3)}) ${value.slice(3)}`;
            } else {
              formatted = `(${value.slice(0, 3)}) ${value.slice(3, 6)}-${value.slice(6)}`;
            }
          }
          
          // Set the formatted value
          input.value = formatted;
          
          // Calculate new cursor position
          let newCursorPosition = cursorPosition;
          
          // If we added formatting characters, adjust cursor position
          if (formatted.length > value.length) {
            const addedChars = formatted.length - value.length;
            newCursorPosition = cursorPosition + addedChars;
          }
          
          // Set cursor position
          input.setSelectionRange(newCursorPosition, newCursorPosition);
        });
        
        // Handle backspace and delete properly
        phoneInput.addEventListener("keydown", (e) => {
          const input = e.target as HTMLInputElement;
          if (!input) return;
          
          const keyEvent = e as KeyboardEvent;
          if (keyEvent.key === "Backspace" || keyEvent.key === "Delete") {
            const cursorPosition = input.selectionStart;
            const value = input.value;
            
            // If cursor is on a formatting character, move it back
            if (value[cursorPosition - 1] && !/\d/.test(value[cursorPosition - 1])) {
              e.preventDefault();
              input.setSelectionRange(cursorPosition - 1, cursorPosition - 1);
            }
          }
        });
      }

      // Form submission
      form.addEventListener("submit", async (e) => {
        e.preventDefault();
        signupError.textContent = "";
        (buttonText as HTMLElement).style.display = "none";
        (loader as HTMLElement).style.display = "inline-block";
        (submitButton as HTMLButtonElement).disabled = true;

        const formData = new FormData(form as HTMLFormElement);

        const selectedOption = selectEl.querySelector("option:checked");
        if (!selectedOption) {
          signupError.textContent = "Please select a session.";
          (buttonText as HTMLElement).style.display = "";
          (loader as HTMLElement).style.display = "none";
          (submitButton as HTMLButtonElement).disabled = false;
          return;
        }

        const isoDateUTC = selectedOption.getAttribute("data-date");
        const sessionValue = (selectedOption as HTMLOptionElement).value;

        if (!isoDateUTC || !sessionValue) {
          signupError.textContent = "Invalid session data.";
          (buttonText as HTMLElement).style.display = "";
          (loader as HTMLElement).style.display = "none";
          (submitButton as HTMLButtonElement).disabled = false;
          return;
        }
        let sessionDetails;
        try {
          sessionDetails = JSON.parse(sessionValue);
        } catch (error) {
          signupError.textContent = "Invalid session format.";
          (buttonText as HTMLElement).style.display = "";
          (loader as HTMLElement).style.display = "none";
          (submitButton as HTMLButtonElement).disabled = false;
          return;
        }

        const sessionId = sessionDetails.id;
        const sessionTimeZone = sessionDetails.timeZone;

        // Function to get current timestamp in EST
        function getESTTimestamp() {
            const now = new Date();
            // Get EST time by creating a new date with EST offset
            const estOffset = -5; // EST is UTC-5
            const utc = now.getTime() + (now.getTimezoneOffset() * 60000);
            const estTime = new Date(utc + (estOffset * 3600000));
            
            // Format as YYYY-MM-DDTHH:mm:ss-05:00
            const year = estTime.getFullYear();
            const month = String(estTime.getMonth() + 1).padStart(2, '0');
            const day = String(estTime.getDate()).padStart(2, '0');
            const hours = String(estTime.getHours()).padStart(2, '0');
            const minutes = String(estTime.getMinutes()).padStart(2, '0');
            const seconds = String(estTime.getSeconds()).padStart(2, '0');
            
            return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}-05:00`;
        }

        const estTimestamp = getESTTimestamp();

        const payload = {
          session: sessionId,
          name: formData.get("full_name"),
          email: formData.get("email"),
          phone_number: (() => {
            const val = formData.get("phone_number");
            return typeof val === "string" ? val.replace(/\D/g, "") : "";
          })(),
          invest_intent: formData.get("invest_intent"),
          bot_field: formData.get("bot-field"),
          date: isoDateUTC,
          fullDate: getFullDateString(isoDateUTC, sessionTimeZone),
          utm_campaign: localStorage.getItem("utmCampaign") || undefined,
          webinar_sign_up_date: estTimestamp, // Use EST timestamp
        };

        console.log("Payload being sent:", payload);

        // Store webinar registration timestamp in localStorage (EST)
        localStorage.setItem("webinar_sign_up_date", estTimestamp);
        console.log("✅ Webinar registration timestamp saved to localStorage (EST):", estTimestamp);

        try {
          const res = await fetch("/api/webinar-registration", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload),
          });
          if (!res.ok) {
            signupError.textContent = "Registration failed. Please try again.";
            (buttonText as HTMLElement).style.display = "";
            (loader as HTMLElement).style.display = "none";
            (submitButton as HTMLButtonElement).disabled = false;
            return;
          }
          
          // Store the response data in localStorage
          const result = await res.json();
          if (result.ghl_contact_id) {
            localStorage.setItem("ghl_contact_id", result.ghl_contact_id);
            console.log("✅ GHL Contact ID saved:", result.ghl_contact_id);
          }
          
          // Store user email for the questions page
          const userEmail = formData.get("email");
          if (userEmail) {
            localStorage.setItem("userEmail", typeof userEmail === "string" ? userEmail : "");
          }
          
          // Send GA4 conversion event
          if (typeof triggerEvent === 'function') {
            triggerEvent('register_now', 'registerNow');
          }
          
          window.location.href = "/questions";
        } catch (err) {
          signupError.textContent = "An error occurred during registration.";
          (buttonText as HTMLElement).style.display = "";
          (loader as HTMLElement).style.display = "none";
          (submitButton as HTMLButtonElement).disabled = false;
        }
      });

      function ordinalSuffix(day) {
        const d = parseInt(day, 10);
        if (d > 3 && d < 21) return `${d}th`;
        switch (d % 10) {
          case 1:
            return `${d}st`;
          case 2:
            return `${d}nd`;
          case 3:
            return `${d}rd`;
          default:
            return `${d}th`;
        }
      }

      function getFullDateString(isoDateUTC, sessionTimeZone) {
        const date = new Date(isoDateUTC);

        const options = {
          weekday: "long",
          month: "long",
          day: "numeric",
          hour: "numeric",
          minute: "2-digit",
          hour12: true,
          timeZone: sessionTimeZone,
          timeZoneName: "short",
        };

        return date.toLocaleString(
          "en-US",
          options as Intl.DateTimeFormatOptions,
        );
      }
    });
  });
</script>
