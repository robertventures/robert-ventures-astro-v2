---
import Image from "astro/components/Image.astro";
import Opener from "../images/svg/opener.svg";
import usFlag from "../images/usflag.png";

// Component configuration
const formConfig = {
  maxSessions: 3,
  defaultTimezone: "America/New_York",
  estOffset: -5
};

// Analytics events
const analyticsEvents = {
  registerNow: { ga4: 'register_now', clarity: 'registerNow' },
  webinarRegistered: { ga4: 'webinar_registered', clarity: 'webinarRegistered' }
};
---

<div class="form">
  <form class="form-cta">
    <h3>Next <span class="heading">Live</span> Webinar:</h3>
    <div class="time">
      <div class="days">
        <span>0</span>
        <p>days</p>
      </div>
      <div class="hours">
        <span>0</span>
        <p>hours</p>
      </div>
      <div class="minutes">
        <span>0</span>
        <p>minutes</p>
      </div>
      <div class="seconds">
        <span>0</span>
        <p>seconds</p>
      </div>
    </div>
    <div class="form-block">
      <div class="select-container">
        <select name="session" required>
          <option value="" disabled selected>Select an upcoming session</option>
        </select>
        <Opener />
      </div>
      <div class="name">
        <input
          type="text"
          name="full_name"
          placeholder="Full Name"
          required
          class="email-input"
        />
      </div>
      <input
        type="email"
        name="email"
        placeholder="Enter Your Email"
        required
        class="email-input"
      />
      <div class="phone-input-wrapper">
        <Image src={usFlag} alt="US Flag" height={22} class="phone-flag" />
        <input
          type="tel"
          name="phone_number"
          placeholder="Phone Number"
          required
        />
      </div>

      <input
        type="text"
        name="bot-field"
        class="bot-field"
        style="display: none;"
      />
    </div>
    <button type="submit">
      <span class="button-text">REGISTER NOW</span>
      <span class="loader"></span>
    </button>
    <p class="signup-error"></p>
  </form>
</div>

<style>
  span.heading {
    background: linear-gradient(90deg, #5028ff 0%, #ff592c 100%);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  
  .time {
    display: flex;
    justify-content: space-around;
    margin-top: 1rem;
    margin-bottom: 1rem;
  }

  .time div {
    font-weight: 600;
  }
  
  .form {
    max-width: 366px;
    margin: 0 auto;
    background: #ffffff;
    border-radius: 1rem;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1), 0 4px 10px rgba(0, 0, 0, 0.05);
    padding: 1rem;
  }

  .form-block {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-shrink: 0;
    margin: 0 auto;
    flex-direction: column;
    gap: 0.75rem;
    width: 100%;
    box-sizing: border-box;
    margin-bottom: 1.25rem;
  }

  .name {
    display: flex;
    gap: 0.75rem;
    width: 100%;
  }

  .select-container {
    position: relative;
    width: 100%;
  }

  .select-container svg {
    position: absolute;
    right: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    z-index: 1;
  }

  input,
  select {
    border: none;
    flex-grow: 1;
    border: 1px solid #afb5bc;
    background-color: #f8f9fa;
    padding: 1rem 0.75rem;
    width: 100%;
    box-sizing: border-box;
    border-radius: 0.75rem;
  }

  input::placeholder,
  select:invalid {
    color: #737373;
    opacity: 1;
  }

  select {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-color: #f8f9fa;
    border: 1px solid #afb5bc;
    width: 100%;
    color: #737373;
  }
  
  select:required:not(:invalid) {
    color: #1d1d1f;
  }

  select option[disabled] {
    color: #737373 !important;
  }

  button {
    background-color: #5028ff;
    border: none;
    color: #fff;
    border-radius: 0.75rem;
    padding: 1rem 0.75rem;
    font-size: 1.125rem;
    font-weight: 500;
    width: 100%;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .signup-error {
    display: none;
    color: red;
    text-align: center;
    margin-top: 0.5rem;
  }

  .loader {
    border: 2px solid #ffffff80;
    border-top: 2px solid #fff;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    animation: spin 1s linear infinite;
    display: none;
    margin-left: 0.5rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .phone-input-wrapper {
    position: relative;
    width: 100%;
  }
  
  .phone-input-wrapper .phone-flag {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    width: auto;
    height: 22px;
    object-fit: contain;
    aspect-ratio: 22/16;
    pointer-events: none;
    z-index: 2;
    margin-right: 12px;
  }
  
  .phone-input-wrapper input[type="tel"] {
    padding-left: calc(22px + 12px + 0.75rem) !important;
  }

  @media only screen and (min-width: 990px) {
    .form {
      max-width: 600px;
    }
  }
</style>

<script>
  // Utility functions
  const utils = {
    // Format phone number
    formatPhoneNumber: (value) => {
      const digits = value.replace(/\D/g, "");
      if (digits.length <= 3) return digits;
      if (digits.length <= 6) return `(${digits.slice(0, 3)}) ${digits.slice(3)}`;
      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;
    },

    // Get EST/EDT timestamp with correct timezone offset
    getESTTimestamp: () => {
      const now = new Date();
      
      // Create a date in Eastern timezone to get the correct offset
      const easternTime = new Date(now.toLocaleString("en-US", { timeZone: "America/New_York" }));
      const utcTime = new Date(now.toLocaleString("en-US", { timeZone: "UTC" }));
      
      // Calculate the offset in minutes
      const offsetMinutes = easternTime.getTime() - utcTime.getTime();
      const offsetHours = Math.floor(Math.abs(offsetMinutes) / (1000 * 60 * 60));
      const offsetSign = offsetMinutes >= 0 ? '+' : '-';
      
      const year = easternTime.getFullYear();
      const month = String(easternTime.getMonth() + 1).padStart(2, '0');
      const day = String(easternTime.getDate()).padStart(2, '0');
      const hours = String(easternTime.getHours()).padStart(2, '0');
      const minutes = String(easternTime.getMinutes()).padStart(2, '0');
      const seconds = String(easternTime.getSeconds()).padStart(2, '0');
      
      return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}${offsetSign}0${offsetHours}:00`;
    },

    // Format time left
    formatTimeLeft: (targetDate) => {
      const now = new Date();
      let diff = targetDate.getTime() - now.getTime();
      if (diff <= 0) return "(Started)";
      
      const days = Math.floor(diff / (1000 * 60 * 60 * 24));
      diff -= days * (1000 * 60 * 60 * 24);
      const hours = Math.floor(diff / (1000 * 60 * 60));
      diff -= hours * (1000 * 60 * 60);
      const minutes = Math.floor(diff / (1000 * 60));
      
      let result = [];
      if (days > 0) result.push(days + (days === 1 ? " day" : " days"));
      if (hours > 0) result.push(hours + (hours === 1 ? " hour" : " hours"));
      if (minutes > 0 && days === 0) result.push(minutes + (minutes === 1 ? " minute" : " minutes"));
      
      return result.length ? "In " + result.join(" ") : "Soon";
    },

    // Trigger analytics events
    triggerEvent: (eventName, clarityEventName) => {
      if ((window as any).dataLayer) {
        (window as any).dataLayer.push({ 'event': eventName });
        console.log('GA4 event triggered: ' + eventName);
      }
      
      if (typeof (window as any).clarity === 'function') {
        (window as any).clarity('event', clarityEventName);
        console.log('Clarity event triggered: ' + clarityEventName);
      }
    }
  };

  // Main webinar form functionality
  let webinarData = null;
  let countdownIntervals = new Map(); // Store intervals for cleanup

  window.addEventListener("DOMContentLoaded", async () => {
    await loadAndInitializeWebinarData();
    
    // Refresh webinar data every 5 minutes to ensure we have the latest sessions
    setInterval(async () => {
      await loadAndInitializeWebinarData();
    }, 5 * 60 * 1000); // 5 minutes
  });

  async function loadAndInitializeWebinarData() {
    try {
      // Fetch webinar data
      const response = await fetch("/api/webinar-data", { cache: "no-store" });
      if (!response.ok) {
        console.error("Failed to fetch webinar data:", response.statusText);
        return;
      }
      const data = await response.json();
      console.log("Fetched webinar data:", data);

      // Store the data globally
      webinarData = data;

      // Initialize form
      initializeForm(data);
    } catch (err) {
      console.error("An error occurred while fetching webinar data:", err);
    }
  }

  function initializeForm(data) {
    document.querySelectorAll(".form").forEach((formContainer, index) => {
      const form = formContainer.querySelector("form.form-cta");
      if (!form) return;

      // Add unique form ID for interval management
      const formContainerEl = formContainer as HTMLElement;
      if (!formContainerEl.dataset.formId) {
        formContainerEl.dataset.formId = `form-${index}`;
      }

      const elements = getFormElements(form, formContainer);
      if (!elements) return;

      const { selectEl, phoneInput, timeElements, signupError, submitButton, buttonText, loader } = elements;

      // Populate sessions dropdown
      populateSessionsDropdown(selectEl, data);

      // Initialize countdown timer
      initializeCountdown(timeElements, data);

      // Setup phone input formatting (only once)
      const phoneInputEl = phoneInput as HTMLInputElement;
      if (!phoneInputEl.dataset.initialized) {
        setupPhoneInput(phoneInput);
        phoneInputEl.dataset.initialized = 'true';
      }

      // Setup form submission (only once)
      const formEl = form as HTMLFormElement;
      if (!formEl.dataset.initialized) {
        setupFormSubmission(form, elements);
        formEl.dataset.initialized = 'true';
      }
    });
  }

  function getFormElements(form, formContainer) {
    const selectEl = form.querySelector("select[name='session']");
    const phoneInput = form.querySelector("input[name='phone_number']");
    const daysSpan = formContainer.querySelector(".days span");
    const hoursSpan = formContainer.querySelector(".hours span");
    const minutesSpan = formContainer.querySelector(".minutes span");
    const secondsSpan = formContainer.querySelector(".seconds span");
    const signupError = form.querySelector(".signup-error");
    const submitButton = form.querySelector("button[type='submit']");
    const buttonText = submitButton.querySelector(".button-text");
    const loader = submitButton.querySelector(".loader");

    if (!selectEl || !daysSpan || !hoursSpan || !minutesSpan || !secondsSpan || 
        !signupError || !submitButton || !buttonText || !loader) {
      console.error("Required form elements not found");
      return null;
    }

    return {
      selectEl,
      phoneInput,
      timeElements: { daysSpan, hoursSpan, minutesSpan, secondsSpan },
      signupError,
      submitButton,
      buttonText,
      loader
    };
  }

  function populateSessionsDropdown(selectEl, data) {
    const sessions = data.results.filter((item) => {
      try {
        const parsed = JSON.parse(item.id);
        return parsed && parsed.type === "ongoing";
      } catch {
        return false;
      }
    });

    const sessionsWithDates = sessions.map(session => {
      try {
        const details = JSON.parse(session.id);
        const nextDate = session.date ? new Date(session.date) : calculateNextSessionDate(details);
        return { session, nextDate };
      } catch (error) {
        console.error("Error processing session:", error);
        return null;
      }
    }).filter(Boolean).sort((a, b) => a.nextDate.getTime() - b.nextDate.getTime());

    selectEl.innerHTML = '<option value="" disabled selected>Select an upcoming session</option>';
    
    // Only show the next 3 sessions
    sessionsWithDates.slice(0, 3).forEach((item) => {
      const { session, nextDate } = item;
      const details = JSON.parse(session.id);
      const userTz = Intl.DateTimeFormat().resolvedOptions().timeZone;
      
      const weekday = nextDate.toLocaleString("en-US", { weekday: "short" });
      const month = nextDate.getMonth() + 1;
      const day = nextDate.getDate();
      const time = nextDate.toLocaleString("en-US", {
        hour: "numeric",
        minute: "2-digit",
        hour12: true,
      });
      
      const tzMatch = nextDate.toLocaleTimeString("en-US", { timeZoneName: "short" }).match(/GMT[+-]\d+/);
      const tzShort = tzMatch ? tzMatch[0] : nextDate.toLocaleString("en-US", { timeZoneName: "short" }).split(" ").pop();
      const timeLeftString = utils.formatTimeLeft(nextDate);
      
      const option = document.createElement("option");
      option.value = session.id;
      option.setAttribute("data-date", nextDate.toISOString());
      option.setAttribute("data-timezone", userTz);
      option.setAttribute("data-original-timezone", details.timeZone);
      option.textContent = `${weekday}, ${month}/${day}, ${time} ${tzShort} - ${timeLeftString}`;
      selectEl.appendChild(option);
    });
  }

  function calculateNextSessionDate(details) {
    const weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    const targetDay = weekdays.indexOf(details.day);
    const [hours, minutes] = details.time.split(":").map(Number);
    let hour24 = hours;
    if (details.period.toUpperCase() === "PM" && hours < 12) hour24 += 12;
    if (details.period.toUpperCase() === "AM" && hours === 12) hour24 = 0;

    const now = new Date();
    const currentTzTime = new Date(now.toLocaleString("en-US", {
      timeZone: details.timeZone || "America/New_York",
    }));

    const currentDay = currentTzTime.getDay();
    let daysToAdd = (targetDay - currentDay + 7) % 7;

    if (daysToAdd === 0) {
      const currentHour = currentTzTime.getHours();
      const currentMinute = currentTzTime.getMinutes();
      if (currentHour > hour24 || (currentHour === hour24 && currentMinute >= minutes)) {
        daysToAdd = 7;
      }
    }

    const sessionDate = new Date(currentTzTime);
    sessionDate.setDate(sessionDate.getDate() + daysToAdd);
    sessionDate.setHours(hour24, minutes, 0, 0);

    const sessionUTC = new Date(sessionDate.getTime() - sessionDate.getTimezoneOffset() * 60000);
    const tempDate = new Date(sessionDate.toISOString().slice(0, -1));
    const tzOffset = new Date(tempDate.toLocaleString("en-US", {
      timeZone: details.timeZone || "America/New_York",
    })).getTime() - tempDate.getTime();
    
    return new Date(sessionDate.getTime() - tzOffset);
  }

  function initializeCountdown(timeElements, data) {
    // Clear any existing interval for this form
    const formElement = timeElements.daysSpan.closest('.form') as HTMLElement;
    const formId = formElement?.dataset?.formId || 'default';
    if (countdownIntervals.has(formId)) {
      clearInterval(countdownIntervals.get(formId));
    }

    const sessions = data.results.filter((item) => {
      try {
        const parsed = JSON.parse(item.id);
        return parsed && parsed.type === "ongoing";
      } catch {
        return false;
      }
    });

    if (sessions.length > 0) {
      // Use the same logic as the dropdown to find the next upcoming session
      const sessionsWithDates = sessions.map(session => {
        try {
          const details = JSON.parse(session.id);
          const nextDate = session.date ? new Date(session.date) : calculateNextSessionDate(details);
          return { session, nextDate };
        } catch (error) {
          console.error("Error processing session:", error);
          return null;
        }
      }).filter(Boolean).sort((a, b) => a.nextDate.getTime() - b.nextDate.getTime());

      if (sessionsWithDates.length > 0) {
        let currentSessionIndex = 0;
        
        function updateCountdown() {
          const now = new Date();
          
          // Check if current session has passed and switch to next one
          while (currentSessionIndex < sessionsWithDates.length) {
            const currentSession = sessionsWithDates[currentSessionIndex];
            const timeLeft = currentSession.nextDate.getTime() - now.getTime();
            
            if (timeLeft > 0) {
              // This session is still upcoming, use it
              break;
            } else {
              // This session has passed, move to next one
              currentSessionIndex++;
            }
          }
          
          // If we've gone through all sessions, show zeros
          if (currentSessionIndex >= sessionsWithDates.length) {
            timeElements.daysSpan.textContent = "0";
            timeElements.hoursSpan.textContent = "0";
            timeElements.minutesSpan.textContent = "0";
            timeElements.secondsSpan.textContent = "0";
            return;
          }
          
          const currentSession = sessionsWithDates[currentSessionIndex];
          const timeLeft = currentSession.nextDate.getTime() - now.getTime();

          const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
          const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
          const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
          const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

          timeElements.daysSpan.textContent = days.toString();
          timeElements.hoursSpan.textContent = hours.toString();
          timeElements.minutesSpan.textContent = minutes.toString();
          timeElements.secondsSpan.textContent = seconds.toString();
        }

        updateCountdown();
        const interval = setInterval(updateCountdown, 1000);
        countdownIntervals.set(formId, interval);
      }
    }
  }

  function setupPhoneInput(phoneInput) {
    if (!phoneInput) return;

    phoneInput.addEventListener("input", (e) => {
      const input = e.target;
      if (!input) return;
      
      const cursorPosition = input.selectionStart;
      let value = input.value.replace(/\D/g, "");
      
      if (value.length > 10) {
        value = value.slice(0, 10);
      }
      
      const formatted = utils.formatPhoneNumber(value);
      input.value = formatted;
      
      let newCursorPosition = cursorPosition;
      if (formatted.length > value.length) {
        const addedChars = formatted.length - value.length;
        newCursorPosition = cursorPosition + addedChars;
      }
      
      input.setSelectionRange(newCursorPosition, newCursorPosition);
    });
    
    phoneInput.addEventListener("keydown", (e) => {
      const input = e.target;
      if (!input) return;
      
      if (e.key === "Backspace" || e.key === "Delete") {
        const cursorPosition = input.selectionStart;
        const value = input.value;
        
        if (value[cursorPosition - 1] && !/\d/.test(value[cursorPosition - 1])) {
          e.preventDefault();
          input.setSelectionRange(cursorPosition - 1, cursorPosition - 1);
        }
      }
    });
  }

  function setupFormSubmission(form, elements) {
    const { selectEl, signupError, submitButton, buttonText, loader, phoneInput } = elements;

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      signupError.textContent = "";
      buttonText.style.display = "none";
      loader.style.display = "inline-block";
      submitButton.disabled = true;

      // --- PHONE VALIDATION ---
      const phoneRaw = phoneInput.value.replace(/\D/g, "");
      // US phone: 10 digits, area code cannot start with 0 or 1
      if (!/^([2-9][0-9]{2})([2-9][0-9]{2})([0-9]{4})$/.test(phoneRaw)) {
        signupError.textContent = "Please enter a valid US phone number (10 digits, area code cannot start with 0 or 1).";
        signupError.style.display = "block";
        resetFormState(buttonText, loader, submitButton);
        phoneInput.focus();
        return;
      }
      signupError.style.display = "none";
      // --- END PHONE VALIDATION ---

      const formData = new FormData(form);
      const selectedOption = selectEl.querySelector("option:checked");
      
      if (!selectedOption) {
        signupError.textContent = "Please select a session.";
        resetFormState(buttonText, loader, submitButton);
        return;
      }

      const isoDateUTC = selectedOption.getAttribute("data-date");
      const sessionValue = selectedOption.value;

      if (!isoDateUTC || !sessionValue) {
        signupError.textContent = "Invalid session data.";
        resetFormState(buttonText, loader, submitButton);
        return;
      }

      let sessionDetails;
      try {
        sessionDetails = JSON.parse(sessionValue);
      } catch (error) {
        signupError.textContent = "Invalid session format.";
        resetFormState(buttonText, loader, submitButton);
        return;
      }

      // Only collect the main UTM parameters
      const utmParams = [
        "utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term", "utm_id"
      ];
      const utmData = {};
      utmParams.forEach(param => {
        const value = localStorage.getItem(param);
        if (value) utmData[param] = value;
      });

      const payload = {
        session: sessionDetails.id,
        name: formData.get("full_name"),
        email: formData.get("email"),
        phone_number: (() => {
          const val = formData.get("phone_number");
          return typeof val === "string" ? val.replace(/\D/g, "") : "";
        })(),
        invest_intent: formData.get("invest_intent"),
        bot_field: formData.get("bot-field"),
        date: isoDateUTC,
        fullDate: getFullDateString(isoDateUTC, sessionDetails.timeZone),
        utm: utmData, // Only send the main UTM fields
        utm_campaign: localStorage.getItem("utm_campaign") || undefined,
        webinar_sign_up_date: utils.getESTTimestamp(),
        user_timezone: selectedOption.getAttribute("data-timezone"),
        user_ip: localStorage.getItem("userIP") || undefined,
        webinar_test: 'webinar-ux_2025-07-21_v1',
        webinar_variant: window.location.pathname.includes('webinar-2') ? 'variant_a' : 'control'
      };

      console.log("Payload being sent:", payload);
      localStorage.setItem("webinar_sign_up_date", utils.getESTTimestamp());

      try {
        const res = await fetch("/api/webinar-registration", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        });
        
        if (!res.ok) {
          signupError.textContent = "Registration failed. Please try again.";
          resetFormState(buttonText, loader, submitButton);
          return;
        }
        
        const result = await res.json();
        if (result.ghl_contact_id) {
          localStorage.setItem("ghl_contact_id", result.ghl_contact_id);
          console.log("✅ GHL Contact ID saved:", result.ghl_contact_id);
        }
        
        const userEmail = formData.get("email");
        if (userEmail) {
          localStorage.setItem("userEmail", typeof userEmail === "string" ? userEmail : "");
        }
        
        // Store full session details for calendar
        localStorage.setItem("webinarSession", JSON.stringify({
          title: sessionDetails.title || "Robert Ventures Webinar",
          date: isoDateUTC,
          timeZone: sessionDetails.timeZone,
          fullDate: getFullDateString(isoDateUTC, sessionDetails.timeZone),
          email: formData.get("email"),
          name: formData.get("full_name"),
        }));
        
        // Trigger analytics events
        utils.triggerEvent('webinar_registered', 'webinarRegistered');
        
        window.location.href = "/questions";
      } catch (err) {
        signupError.textContent = "An error occurred during registration.";
        resetFormState(buttonText, loader, submitButton);
      }
    });
  }

  function resetFormState(buttonText, loader, submitButton) {
    buttonText.style.display = "";
    loader.style.display = "none";
    submitButton.disabled = false;
  }

  function getFullDateString(isoDateUTC, sessionTimeZone) {
    const date = new Date(isoDateUTC);
    const options = {
      weekday: "long",
      month: "long",
      day: "numeric",
      hour: "numeric",
      minute: "2-digit",
      hour12: true,
      timeZone: sessionTimeZone,
      timeZoneName: "short",
    } as Intl.DateTimeFormatOptions;
    return date.toLocaleString("en-US", options);
  }
</script>
